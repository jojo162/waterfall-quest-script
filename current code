import com.runemate.game.api.hybrid.entities.*;
import com.runemate.game.api.hybrid.region.*;
import com.runemate.game.api.hybrid.location.*;
import com.runemate.game.api.hybrid.location.navigation.Path;
import com.runemate.game.api.hybrid.region.*;
import com.runemate.game.api.osrs.local.hud.interfaces.*;
import com.runemate.game.api.script.Execution;
import com.runemate.game.api.script.framework.LoopingScript;
import com.runemate.game.api.script.framework.listeners.*;
import com.runemate.game.api.script.framework.listeners.events.*;
import com.runemate.game.api.hybrid.entities.details.Locatable;

import java.util.Arrays;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class WaterfallQuestScript extends LoopingScript implements InventoryListener, DeathListener {
    private static final int ROPE_ID = 954;
    private static final int WATER_RUNE_ID = 555;
    private static final int AIR_RUNE_ID = 556;
    private static final int EARTH_RUNE_ID = 557;
    private static final int DEAD_TREE_ID = 6702;
    private static final int BOOKCASE_ID = 6707;
    private static final int CRATE_ID = 6706;
    private static final int CHEST_ID = 6705;
    private static final int GOLRIE_ID = 6710;
    private static final int DOOR_ID = 6709;
    private static final int CHALICE_ID = 6704;

    private static final Coordinate TOMB_CENTER = new Coordinate(2545, 9880, 0);
    private static final int TOMB_RADIUS = 4;

    private static final Area TOMB_AREA = Area.rectangular(new Coordinate(2500, 9860, 0), new Coordinate(2590, 9920, 0));

    private boolean hasFood;
    private boolean hasRequiredItems;
    private boolean isAtTomb;
    private boolean isTalkingToGolrie;

    private final Path pathToRock = Path.buildTo(GameObjects.newQuery().names("Rock").actions("Swim to").results().nearest());
    private final Path pathToDeadTree = Path.buildTo(GameObjects.newQuery().ids(DEAD_TREE_ID).results().nearest());
    private final Path pathToBookcase = Path.buildTo(GameObjects.newQuery().ids(BOOKCASE_ID).results().nearest());
    private final Path pathToCrate = Path.buildTo(GameObjects.newQuery().ids(CRATE_ID).results().first());
    private final Path pathToChest = Path.buildTo(GameObjects.newQuery().ids(CHEST_ID).actions("Open").results().nearest());
    private final Path pathToGolrie = Path.buildTo(Npcs.newQuery().ids(GOLRIE_ID).results().nearest());
    private final Path pathToTomb = Path.buildTo(TOMB_CENTER);
    private final Path pathToDoor = Path.buildTo(GameObjects.newQuery().ids(DOOR_ID).results().first());
    private final Path pathToChalice = Path.buildTo(GameObjects.newQuery().ids(CHALICE_ID).results().first());

    private static final String[] FOOD_ITEMS = {"Trout", "Salmon", "Tuna", "Lobster", "Swordfish"};

    // JavaFX GUI components
    private Label statusLabel;
    private Button startButton;
    private Button stopButton;

    @Override
    public void onStart(String... args) {
        getEventDispatcher().addListener(this);
        setLoopDelay(500, 800);

        // Launch the JavaFX application on the JavaFX application thread
        Platform.runLater(this::launchGUI);
    }

    @Override
    public void onItemAdded(ItemEvent event) {
        Item item = event.getItem();
        if (Arrays.stream(FOOD_ITEMS).anyMatch(item.getDefinition()::getName)) {
            hasFood = true;
        } else if (item.getId() == ROPE_ID ||
                item.getId() == WATER_RUNE_ID ||
                item.getId() == AIR_RUNE_ID ||
                item.getId() == EARTH_RUNE_ID) {
            hasRequiredItems = true;
        }
    }

    @Override
    public void onItemRemoved(ItemEvent event) {
        Item item = event.getItem();
        if (Arrays.stream(FOOD_ITEMS).anyMatch(item.getDefinition()::getName)) {
            hasFood = false;
        } else if (item.getId() == ROPE_ID ||
                item.getId() == WATER_RUNE_ID ||
                item.getId() == AIR_RUNE_ID ||
                item.getId() == EARTH_RUNE_ID) {
            hasRequiredItems = false;
        }
    }

    @Override
    public void onLoop() {
        if (Players.getLocal().getAutoRetaliate()) {
            Players.getLocal().toggleAutoRetaliate(false);
            Execution.delay(2000, 3000);
        }

        if (!hasRequiredItems) {
            handleRequiredItems();
        } else if (!hasFood) {
            handleFood();
        } else if (!isAtTomb) {
            handlePathToTomb();
        } else {
            if (!Inventory.contains(1351)) {
                handleSkeleton();
            } else {
                handleQuestProgression();
            }
        }
    }

    @Override
    public void onDeath(DeathEvent event) {
        if (TOMB_AREA.contains(Players.getLocal())) {
            Execution.delay(5000, 10000);
            if (Players.getLocal().distanceTo(TOMB_CENTER) <= TOMB_RADIUS) {
                isAtTomb = true;
            }
        }
    }

    @Override
    public void onStop() {
        // Implement any cleanup actions or logic here
    }

    private void handleRequiredItems() {
        if (Bank.isOpen()) {
            if (!Inventory.contains(ROPE_ID) ||
                    !Inventory.contains(WATER_RUNE_ID, 6) ||
                    !Inventory.contains(AIR_RUNE_ID, 6) ||
                    !Inventory.contains(EARTH_RUNE_ID, 6)) {
                if (Bank.withdraw(ROPE_ID, 1) &&
                        Bank.withdraw(WATER_RUNE_ID, 6) &&
                        Bank.withdraw(AIR_RUNE_ID, 6) &&
                        Bank.withdraw(EARTH_RUNE_ID, 6)) {
                    Execution.delayUntil(() ->
                                    Inventory.contains(ROPE_ID) &&
                                            Inventory.contains(WATER_RUNE_ID, 6) &&
                                            Inventory.contains(AIR_RUNE_ID, 6) &&
                                            Inventory.contains(EARTH_RUNE_ID, 6),
                            2000, 3000);
                }
            } else {
                Bank.close();
            }
        } else {
            Bank.open();
        }
    }

    private void handleFood() {
        if (Bank.isOpen()) {
            if (!Inventory.containsAnyOf(FOOD_ITEMS)) {
                if (Bank.withdrawAll(FOOD_ITEMS)) {
                    Execution.delayUntil(() -> Inventory.containsAnyOf(FOOD_ITEMS), 2000, 3000);
                }
            } else {
                Bank.close();
            }
        } else {
            Bank.open();
        }
    }

    private void handlePathToTomb() {
        if (Players.getLocal().distanceTo(TOMB_CENTER) <= TOMB_RADIUS) {
            isAtTomb = true;
        } else {
            if (pathToRock != null) {
                if (pathToRock.step()) {
                    Execution.delay(3000, 5000);
                }
            }
        }
    }

    private void handleSkeleton() {
        Npc skeleton = Npcs.newQuery().names("Skeleton").results().nearest();
        if (skeleton != null && skeleton.interact("Attack")) {
            Execution.delayUntil(() -> Players.getLocal().getTarget() != null && Players.getLocal().getTarget().equals(skeleton), 2000, 3000);
        }
    }

    private void handleQuestProgression() {
        if (isTalkingToGolrie) {
            handleGolrie();
        } else {
            if (pathToDeadTree != null) {
                if (pathToDeadTree.step()) {
                    Execution.delay(3000, 5000);
                }
            } else if (pathToBookcase != null) {
                if (pathToBookcase.step()) {
                    Execution.delay(3000, 5000);
                }
            } else if (pathToCrate != null) {
                if (pathToCrate.step()) {
                    Execution.delay(3000, 5000);
                }
            } else if (pathToChest != null) {
                if (pathToChest.step()) {
                    Execution.delay(3000, 5000);
                }
            } else if (pathToGolrie != null) {
                if (pathToGolrie.step()) {
                    Execution.delay(3000, 5000);
                }
            } else if (pathToTomb != null) {
                if (pathToTomb.step()) {
                    Execution.delay(3000, 5000);
                }
            } else if (pathToDoor != null) {
                if (pathToDoor.step()) {
                    Execution.delay(3000, 5000);
                }
            } else if (pathToChalice != null) {
                if (pathToChalice.step()) {
                    Execution.delay(3000, 5000);
                }
            }
        }
    }

    private void handleGolrie() {
        Npc golrie = Npcs.newQuery().ids(GOLRIE_ID).results().nearest();
        if (golrie != null && golrie.interact("Talk-to")) {
            Execution.delayUntil(() -> Players.getLocal().getTarget() != null && Players.getLocal().getTarget().equals(golrie), 2000, 3000);
        }
    }

    private void launchGUI() {
        WaterfallQuestGUI gui = new WaterfallQuestGUI();
        gui.setScript(this);
        gui.show();
    }
}

